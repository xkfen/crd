/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "crd/pkg/apis/foo/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HelloTypeLister helps list HelloTypes.
type HelloTypeLister interface {
	// List lists all HelloTypes in the indexer.
	List(selector labels.Selector) (ret []*v1.HelloType, err error)
	// HelloTypes returns an object that can list and get HelloTypes.
	HelloTypes(namespace string) HelloTypeNamespaceLister
	HelloTypeListerExpansion
}

// helloTypeLister implements the HelloTypeLister interface.
type helloTypeLister struct {
	indexer cache.Indexer
}

// NewHelloTypeLister returns a new HelloTypeLister.
func NewHelloTypeLister(indexer cache.Indexer) HelloTypeLister {
	return &helloTypeLister{indexer: indexer}
}

// List lists all HelloTypes in the indexer.
func (s *helloTypeLister) List(selector labels.Selector) (ret []*v1.HelloType, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.HelloType))
	})
	return ret, err
}

// HelloTypes returns an object that can list and get HelloTypes.
func (s *helloTypeLister) HelloTypes(namespace string) HelloTypeNamespaceLister {
	return helloTypeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HelloTypeNamespaceLister helps list and get HelloTypes.
type HelloTypeNamespaceLister interface {
	// List lists all HelloTypes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.HelloType, err error)
	// Get retrieves the HelloType from the indexer for a given namespace and name.
	Get(name string) (*v1.HelloType, error)
	HelloTypeNamespaceListerExpansion
}

// helloTypeNamespaceLister implements the HelloTypeNamespaceLister
// interface.
type helloTypeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HelloTypes in the indexer for a given namespace.
func (s helloTypeNamespaceLister) List(selector labels.Selector) (ret []*v1.HelloType, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.HelloType))
	})
	return ret, err
}

// Get retrieves the HelloType from the indexer for a given namespace and name.
func (s helloTypeNamespaceLister) Get(name string) (*v1.HelloType, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("hellotype"), name)
	}
	return obj.(*v1.HelloType), nil
}
